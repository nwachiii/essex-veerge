import {
  Button,
  HStack,
  Heading,
  ModalBody,
  ModalCloseButton,
  ModalFooter,
  Stack,
  Text,
  VStack,
  useToast,
} from '@chakra-ui/react';
import {useMutation} from '@tanstack/react-query';
import {OTPInput} from 'chakra-otp-input';
import React from 'react';
import {useState} from 'react';
import {Auth2FA} from '../../../../apis/settings';
import {toastForError} from '../../../../utils/toastForErrors';
import {CreateToast} from '../../../../ui-lib';

const VerifyTwoFa = ({submitPaymentForm, mutation}) => {
  const toast = useToast();

  const [twoFaOtp, setTwoFaOtp] = useState(null);
  const mutationForVerification = useMutation(
    formData => {
      return Auth2FA(formData);
    },
    {
      onSuccess: res => {
        submitPaymentForm();
        setTwoFaOtp(null);
      },
      onError: error => {
        toast({
          title: 'Oops ...',
          description: `${
            error?.response?.status === 500
              ? "Apologies for the inconvenience. We're working on it. Please try again later."
              : error?.response?.status === 401
                ? 'Authentication Timeout: For security reasons, your session has timed out. Please log in again to continue.'
                : (error?.response?.data?.message ??
                  error?.response?.message ??
                  error?.message ??
                  'Something went wrong')
          }`,
          status: 'error',
          duration: 8000,
          isClosable: true,
          position: 'top-right',
        });
      },
    }
  );

  const handleVerify = () => {
    return mutationForVerification.mutate({
      code: twoFaOtp,
    });
  };
  return (
    <Stack gap={`36px`}>
      <VStack gap={`15px`} alignItems={`flex-start`} w={`100%`}>
        <HStack justify="space-between" align="center" position="relative" w={`100%`}>
          <Heading fontSize="24px" fontWeight="600" color="#191919" m={`0px`}>
            Two factor authentication
          </Heading>

          <ModalCloseButton position="initial" height={`16px`} width="16px" />
        </HStack>
        <Text fontSize="14px" fontWeight="300" w="full" textAlign="start" color="#3D3D3D">
          Enter the 6-digit verification code generated by your Authenticator app to proceed.
        </Text>
      </VStack>

      <ModalBody p={`0px`}>
        <OTPInput
          w="full"
          h="61.224px"
          value={twoFaOtp}
          type="number"
          noInputs={6}
          bg="#E5E5E5"
          boxShadow="none"
          color="#333"
          fontSize="35.621px"
          fontWeight="300"
          borderRadius="8px"
          onChange={value => setTwoFaOtp(value)}
        />
      </ModalBody>
      <ModalFooter p="0px">
        <Button
          borderRadius="72px"
          bg="#3D3D3D"
          color="#fff"
          _hover={{opacity: 1}}
          h="55px"
          w="full"
          fontSize="18px"
          fontWeight="400"
          isDisabled={twoFaOtp?.length != 6}
          onClick={handleVerify}
          isLoading={mutation.isLoading || mutationForVerification.isLoading}
        >
          Proceed
        </Button>
      </ModalFooter>
    </Stack>
  );
};

export default VerifyTwoFa;
