import React, {useState} from 'react';
import {
  ModalContent,
  ModalHeader,
  DrawerFooter,
  DrawerBody,
  ModalCloseButton,
  HStack,
  Heading,
  Text,
  Button,
  useToast,
  Stack,
  Modal,
  ModalBody,
  ModalFooter,
  ModalOverlay,
} from '@chakra-ui/react';
import {OTPInput} from 'chakra-otp-input';

import {useMutation} from '@tanstack/react-query';

import {updateTwoFac} from '/src/apis/settings';

const Verify2fa = ({
  modalDisclosure,
  isTransferOfOwnershipMutationLoading,
  handleForTransferOfOwnership,
}) => {
  const [twoFaOtp, setTwoFaValue] = useState(null);

  const toast = useToast();

  const toaster = error =>
    toast({
      title: 'Oops ...',
      description: `${
        error?.response?.status === 500
          ? "Apologies for the inconvenience. We're working on it. Please try again later."
          : error?.response?.status === 401
            ? 'Authentication Timeout: For security reasons, your session has timed out. Please log in again to continue.'
            : error?.response?.data?.message ??
              error?.response?.message ??
              error?.message ??
              'Something went wrong'
      }`,
      status: 'error',
      duration: 8000,
      isClosable: true,
      position: 'top-right',
    });

  const {mutate: mutateAuth, isLoading: isLoadingAuth} = useMutation(
    values => {
      return updateTwoFac(values);
    },
    {
      onSuccess: async res => {
        if (res?.data?.status === 'False') {
          toaster(res);
        } else {
          handleForTransferOfOwnership();
        }
      },
      onError: err => {
        return toaster(err);
      },
    }
  );

  const handleVerify = () => {
    return mutateAuth({
      code: twoFaOtp,
      update: true,
    });
  };

  const isValid = twoFaOtp?.length == 6;
  return (
    <Modal isCentered onClose={modalDisclosure.onClose} isOpen={modalDisclosure.isOpen}>
      <ModalOverlay />

      <ModalContent mt="25vh" minW="438px" borderRadius="16px" p="24px">
        <ModalCloseButton
          _hover={{bg: 'transparent'}}
          boxSize="24px"
          alignSelf="flex-end"
          position="initial"
          mr="5px"
        />
        <ModalBody p="0px" mt="25px">
          <Stack spacing="25px" w="full">
            <Stack spacing="14px">
              <Heading textAlign="center" fontSize="24px" fontWeight="600" color="#191919">
                Verify It&apos;s You
              </Heading>

              <Text textAlign="center" fontSize="16px" color="#4B4B4B" fontWeight="400">
                Enter the 6-digit verification code generated by Authenticator app to proceed.
              </Text>
            </Stack>
            <Stack alignItems="center" spacing="9px">
              <OTPInput
                // style={{color: '#191919'}}
                width=" 49.645px"
                height=" 45.132px"
                value={twoFaOtp}
                type="number"
                noInputs={6}
                bg="#E5E5E5"
                boxShadow="none"
                color="#333"
                fontSize="28.884px"
                _focusVisible={{boxShadow: 'none'}}
                fontWeight="300"
                borderRadius="8px"
                onChange={value => setTwoFaValue(value)}
              />
            </Stack>
          </Stack>
        </ModalBody>
        <ModalFooter p="20px 0px 0px">
          <Button
            h="48px"
            color="#fff"
            w="full"
            // bg="#4545FE"
            bg="#191919"
            variant="dark"
            borderRadius="8px"
            fontSize="14px"
            fontWeight="400"
            _hover={{
              opacity: 1,
            }}
            _active={{
              opacity: 1,
            }}
            onClick={handleVerify}
            isLoading={isLoadingAuth || isTransferOfOwnershipMutationLoading}
            isDisabled={!isValid}
          >
            Verify
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

export default Verify2fa;
